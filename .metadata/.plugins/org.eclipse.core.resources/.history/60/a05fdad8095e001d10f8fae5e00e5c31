package com.hali.openhangout.chat;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.codehaus.jackson.JsonEncoding;

import com.hali.openhangout.message.Message;
import com.hali.openhangout.user.User;
import com.hali.openhangout.user.UserService;
import com.hali.util.JsonEncoder;

import jakarta.websocket.OnClose;
import jakarta.websocket.OnMessage;
import jakarta.websocket.OnOpen;
import jakarta.websocket.Session;
import jakarta.websocket.server.PathParam;
import jakarta.websocket.server.ServerEndpoint;


@ServerEndpoint( value = "/chat/{room}", encoders = JsonEncoder.class )
public class ChatServer {
	private Session session;
	private boolean authenticated = false;
	private User user;
	
	@OnOpen
	public void open(Session session, @PathParam("room") String room) {
		System.out.println("onOpen");
		
		/**
		 * @TODO insert the session into sessions table with room name
		 * 
		 */

		// never timout because of inactivity
		session.setMaxIdleTimeout(-1);
		this.session = session;
		System.out.println("session "+session);
	}
	
	@OnClose
	public void close() {
		/** 
		 * @TODO remove the session from sessions table
		 */
		this.session = null;
		this.authenticated = false;
		System.out.println("closed");
	}
	
	@OnMessage
	public void handleMessage(String msg) {
		System.out.println("message: "+msg);
		System.out.println("Authenticated is "+authenticated);
		// if the user is not authenticated 
		if(!authenticated) {
			String token = msg;
			try {
				UserService.validateToken(token);
				System.out.println("WS::USER AUTHENTICATED SUCCESS");
				this.authenticated = true;
				this.user = UserService.findByToken(token);
				Message notify = new Message();
				notify.setContent(user.getUsername()" is Connected! Say Hi! to him.");
				notify.setAuthor("SERVER");
				notify.setTimestamp(new Date().toLocaleString());
				broadCast();
//				this.session.getAsyncRemote().sendText("SERVER:: Welcome !");
			}catch(Exception e) {
					System.out.println("UNAUTHENTICATED USER:: CLOSING WEBSOCKET");
				try {
					this.authenticated = false;
					this.session.close();
				}catch(Exception ee) {
					ee.printStackTrace();
				}
			}
		}
		else // if the user is authenticated
		{
			System.out.println("WS:: USER_BEEN_AUTH");
			Message msgResp = new Message();
			msgResp.setContent(msg);
			msgResp.setAuthor(user.getUsername());
			msgResp.setTimestamp(new Date().toString());
			System.out.println(msgResp.toString());
			
			this.session.getAsyncRemote().sendObject(msgResp);
			broadCast(msgResp);
		}
	}
	
	
	
	private void broadCast(Message msg) {
			/** 
			 * @TODO instead of get open sessions write a function that gets
			 * the sessions from the database that have 
			 * the room in the path
			 */
			session.getOpenSessions().forEach((Session sess)->{
			if(sess.isOpen()&&!(sess.getAsyncRemote().equals(this.session.getAsyncRemote())))
			{
				System.out.println("Sending to sessio"+sess);
				System.out.println("from sessio"+this.session);
				if(sess.equals(this.session))
					System.out.println("SOMETHING IS WRONG");
				sess.getAsyncRemote().sendObject(msg);
			}
		});
	}
}

