package com.hali.openhangout;
import java.io.IOException;

import org.glassfish.jersey.server.ContainerRequest;

import jakarta.annotation.Priority;
import jakarta.ws.rs.Priorities;
import jakarta.ws.rs.container.ContainerRequestContext;
import jakarta.ws.rs.container.ContainerRequestFilter;
import jakarta.ws.rs.ext.Provider;

@Provider
@Priority(Priorities.AUTHENTICATION)
public class JsonTokenFilter implements ContainerRequestFilter {
	

//	@Override
//	public void filter(ContainerRequestContext requestContext) throws IOException {
//		// TODO Auto-generated method stub
//		requestContext.get
//		
//	}
	 @Override
	    public ContainerRequest filter(ContainerRequest request) {  // 3
	        String path = request.getPath();                     
	        if(path.equals(AUTHORIZATION_SERVICE_PATH))        // |       4
	             return request;
	        String privateKeyHeaderValue = request.getHeaderValue(PRIVATE_KEY);  // 5
	        if (privateKeyHeaderValue == null || privateKeyHeaderValue.isEmpty())
	            throw new WebApplicationException(getUnAuthorizeResponse(PRIVATE_KEY + " is missing in header"))   // 6
	        try {
	             provider.jwTokenHelper.claimKey(privateKeyHeaderValue);   // 7
	        } catch(Exception e) {
	            if (e instanceof ExpiredJwtException) {
	                throw new WebApplicationException(getUnAuthorizeResponse(PRIVATE_KEY + " is expired"));
	            } else if (e instanceof MalformedJwtException) {
	                throw new WebApplicationException(getUnAuthorizeResponse(PRIVATE_KEY + " is not correct"));
	            }
	        }
	        return request;
	    }


}
